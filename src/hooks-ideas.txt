ИДЕИ ДЛЯ КАСТОМНЫХ ХУКОВ - ПРАКТИКА

=== УРОВЕНЬ 1 - ПРОСТЫЕ СОСТОЯНИЯ ===

✅ 1. useToggle
   - Переключатель true/false с функцией toggle
   - Возвращает: [value, toggle, setTrue, setFalse]
   - Применение: модалки, показать/скрыть элементы

✅ 2. useInput
   - Управление значением и onChange для инпутов
   - Возвращает: {value, onChange, reset, setValue}
   - Применение: формы, поля ввода

✅ 3. usePrevious
   - Хранит предыдущее значение переменной
   - Принимает: любое значение
   - Возвращает: предыдущее значение
   - Применение: анимации, сравнение изменений

=== УРОВЕНЬ 2 - РАБОТА С ЭФФЕКТАМИ ===

✅ 4. useLocalStorage
   - Синхронизация состояния с localStorage
   - Принимает: key, defaultValue
   - Возвращает: [value, setValue]
   - Применение: настройки, темы, сохранение данных

✅ 5. useDebounce
   - Задержка выполнения (полезно для поиска)
   - Принимает: value, delay
   - Возвращает: debouncedValue
   - Применение: поиск, API запросы при вводе

✅ 6. useInterval
   - Безопасный setInterval для React
   - Принимает: callback, delay
   - Применение: таймеры, автообновление данных

=== УРОВЕНЬ 3 - ПРОДВИНУТЫЕ ===

✅ 7. useFetch
   - Загрузка данных с обработкой loading/error
   - Принимает: url, options
   - Возвращает: {data, loading, error, refetch}
   - Применение: API запросы

✅ 8. useDomPath
   - Поиск и генерация CSS селекторов элементов DOM
   - Возвращает: {findDomPath, findElementByPath}
   - findDomPath: (container, target) => cssPath
   - findElementByPath: (container, cssPath) => element
   - Применение: автотесты, отладка, селекторы для скрапинга

9. useElementRef
   - Расширенная работа с ref элементов
   - Возвращает: {ref, element, isConnected, scrollTo, focus, blur, getBoundingRect, getComputedStyle}
   - Применение: прямое управление DOM элементами

10. useOnClickOutside
   - Закрытие модалок по клику вне элемента
   - Принимает: ref, handler
   - Применение: дропдауны, модальные окна, меню

11. useScrollToElement
   - Плавная прокрутка к элементу
   - Принимает: ref, options
   - Возвращает: scrollTo функцию
   - Применение: навигация по странице, якорные ссылки

12. useResizeObserver
   - Отслеживание изменения размеров элемента
   - Принимает: ref, callback
   - Возвращает: размеры и состояние наблюдения
   - Применение: адаптивные компоненты, responsive дизайн

13. useIntersectionObserver
   - Отслеживание появления элемента в viewport
   - Принимает: ref, options
   - Возвращает: {isIntersecting, entry}
   - Применение: ленивая загрузка, анимации при скролле

14. useWindowSize
   - Отслеживание размера окна
   - Возвращает: {width, height}
   - Применение: адаптивный дизайн, ресайз

15. useHover
   - Отслеживание наведения мыши на элемент
   - Принимает: ref
   - Возвращает: isHovered boolean
   - Применение: интерактивные эффекты, тултипы

16. useFocusWithin
   - Отслеживание фокуса внутри элемента
   - Принимает: ref
   - Возвращает: isFocusWithin boolean
   - Применение: выделение активных форм, навигация

=== УРОВЕНЬ 4 - СЛОЖНЫЕ ===

17. useInfiniteScroll
    - Бесконечная прокрутка
    - Принимает: hasMore, loadMore
    - Возвращает: loading, error
    - Применение: ленты новостей, списки товаров

18. useKeyboard
    - Обработка горячих клавиш
    - Принимает: keyMap объект
    - Применение: shortcuts, игры, навигация

19. useAsync
    - Универсальный хук для асинхронных операций
    - Принимает: asyncFunction
    - Возвращает: {data, loading, error, execute}
    - Применение: любые async операции

20. useDragAndDrop
    - Drag & Drop для элементов
    - Принимает: ref, options
    - Возвращает: {isDragging, dragHandlers, dropHandlers}
    - Применение: интерактивные списки, перетаскивание файлов

21. useVirtualList
    - Виртуализация больших списков
    - Принимает: items, itemHeight, containerHeight
    - Возвращает: visibleItems, scrollToIndex
    - Применение: производительность для больших списков

=== РЕКОМЕНДУЕМЫЙ ПОРЯДОК ИЗУЧЕНИЯ ===

Начни с простых:
1. useToggle
2. useInput
3. useLocalStorage

Потом переходи к более сложным!

=== ПОЛЕЗНЫЕ СОВЕТЫ ===

- Всегда называй хуки с приставки "use"
- Используй TypeScript для типизации
- Добавляй обработку ошибок
- Тестируй каждый хук в компоненте
- Изучай исходники популярных библиотек хуков
